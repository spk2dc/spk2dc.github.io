{"version":3,"sources":["webpack:///./src/components/projectCard.js","webpack:///./src/pages/projects.js"],"names":["props","className","postClass","node","frontmatter","thumbnail","style","backgroundImage","childImageSharp","fluid","src","to","fields","slug","backgroundColor","title","description","ProjectsPage","location","data","siteTitle","site","siteMetadata","softwareProjects","software","edges","mechanicalProjects","mechanical","accordionClick","event","target","classList","toggle","panel","nextElementSibling","maxHeight","scrollHeight","keywords","onClick","map","key","query","render"],"mappings":"iKAGe,WAAAA,GAAK,OAClB,yBAAKC,UAAU,gBACb,6BACEA,UAAS,6BAA+BD,EAAME,UAArC,KACPF,EAAMG,KAAKC,YAAYC,UAAvB,yBAEFC,MACEN,EAAMG,KAAKC,YAAYC,WAAa,CAClCE,gBAAgB,OAAQP,EAAMG,KAAKC,YAAYC,UAAUG,gBAAgBC,MAAMC,IAAhE,MAInB,kBAAC,OAAD,CAAMC,GAAIX,EAAMG,KAAKS,OAAOC,KAAMZ,UAAU,kBAC1C,yBACEA,UAAU,oBACVK,MAAO,CAAEQ,gBAAgB,cAEzB,wBAAIb,UAAU,mBACXD,EAAMG,KAAKC,YAAYW,OAASf,EAAMG,KAAKS,OAAOC,SAM3D,yBAAKZ,UAAU,0BACb,yBAAKA,UAAU,qBACb,kBAAC,OAAD,CAAMU,GAAIX,EAAMG,KAAKS,OAAOC,KAAMZ,UAAU,kBAC1C,wBAAIA,UAAU,eAAeD,EAAMG,KAAKC,YAAYW,QAEtD,2BAAIf,EAAMG,KAAKC,YAAYY,iBCtB7BC,G,oBAAe,SAAC,EAAUC,GAAc,IAAtBC,EAAqB,EAArBA,KAChBC,EAAYD,EAAKE,KAAKC,aAAaP,MACnCQ,EAAmBJ,EAAKK,SAASC,MACjCC,EAAqBP,EAAKQ,WAAWF,MAE3C,SAASG,EAAeC,GACtBA,EAAMC,OAAOC,UAAUC,OAAO,oBAC9B,IAAIC,EAAQJ,EAAMC,OAAOI,mBACrBD,EAAM3B,MAAM6B,UACdF,EAAM3B,MAAM6B,UAAY,KAExBF,EAAM3B,MAAM6B,UAAYF,EAAMG,aAAe,GAAK,KAItD,OACE,kBAAC,IAAD,CAAQrB,MAAOK,GACb,kBAAC,IAAD,CACEL,MAAM,WACNsB,SAAU,CAAC,WAAD,iCAGZ,6BAASpC,UAAU,0CACjB,yBAAKA,UAAU,qBACb,wBAAIA,UAAU,QAAd,YAEA,yBAAKA,UAAU,aACb,4BACEA,UAAU,wBACVqC,QAAS,SAAAT,GAAK,OAAID,EAAeC,KAFnC,wBAOA,yBAAK5B,UAAU,mBACZsB,EAAiBgB,KAAI,YAAe,IAAZpC,EAAW,EAAXA,KACvB,OACE,kBAAC,EAAD,CACEqC,IAAKrC,EAAKS,OAAOC,KACjBV,KAAMA,EACND,UAAS,aAMjB,4BACED,UAAU,wBACVqC,QAAS,SAAAT,GAAK,OAAID,EAAeC,KAFnC,0BAOA,yBAAK5B,UAAU,mBACZyB,EAAmBa,KAAI,YAAe,IAAZpC,EAAW,EAAXA,KACzB,OACE,kBAAC,EAAD,CACEqC,IAAKrC,EAAKS,OAAOC,KACjBV,KAAMA,EACND,UAAS,mBA6Fd,mBAAAF,GAAK,OAClB,kBAAC,cAAD,CACEyC,MAnFe,aAoFfC,OAAQ,SAAAvB,GAAI,OACV,kBAAC,EAAD,eAAcD,SAAUlB,EAAMkB,SAAUC,KAAMA,GAAUnB,S","file":"component---src-pages-projects-js-85dd68e80d990354cd01.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default props => (\n  <div className=\"project-card\">\n    <article\n      className={`post-card project-article ${props.postClass} ${\n        props.node.frontmatter.thumbnail ? `with-image` : `no-image`\n      }`}\n      style={\n        props.node.frontmatter.thumbnail && {\n          backgroundImage: `url(${props.node.frontmatter.thumbnail.childImageSharp.fluid.src})`,\n        }\n      }\n    >\n      <Link to={props.node.fields.slug} className=\"post-card-link\">\n        <div\n          className=\"post-card-content\"\n          style={{ backgroundColor: `#79aeffc7` }}\n        >\n          <h2 className=\"post-card-title\">\n            {props.node.frontmatter.title || props.node.fields.slug}\n          </h2>\n        </div>\n      </Link>\n    </article>\n\n    <div className=\"project-card-textpanel\">\n      <div className=\"project-card-text\">\n        <Link to={props.node.fields.slug} className=\"post-card-link\">\n          <h4 className=\"text-center\">{props.node.frontmatter.title}</h4>\n        </Link>\n        <p>{props.node.frontmatter.description}</p>\n      </div>\n    </div>\n  </div>\n)\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ProjectCard from \"../components/projectCard\"\n\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\n\nconst ProjectsPage = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const softwareProjects = data.software.edges\n  const mechanicalProjects = data.mechanical.edges\n\n  function accordionClick(event) {\n    event.target.classList.toggle(\"accordion-active\")\n    let panel = event.target.nextElementSibling\n    if (panel.style.maxHeight) {\n      panel.style.maxHeight = null\n    } else {\n      panel.style.maxHeight = panel.scrollHeight + 15 + \"px\"\n    }\n  }\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"Projects\"\n        keywords={[`projects`, `gatsby`, `javascript`, `react`]}\n      />\n\n      <article className=\"project-content page-template no-image\">\n        <div className=\"post-content-body\">\n          <h2 className=\"mb-5\">PROJECTS</h2>\n\n          <div className=\"post-feed\">\n            <button\n              className=\"accordion text-center\"\n              onClick={event => accordionClick(event)}\n            >\n              Software Engineering\n            </button>\n\n            <div className=\"accordion-panel\">\n              {softwareProjects.map(({ node }) => {\n                return (\n                  <ProjectCard\n                    key={node.fields.slug}\n                    node={node}\n                    postClass={`post`}\n                  />\n                )\n              })}\n            </div>\n\n            <button\n              className=\"accordion text-center\"\n              onClick={event => accordionClick(event)}\n            >\n              Mechanical Engineering\n            </button>\n\n            <div className=\"accordion-panel\">\n              {mechanicalProjects.map(({ node }) => {\n                return (\n                  <ProjectCard\n                    key={node.fields.slug}\n                    node={node}\n                    postClass={`post`}\n                  />\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      </article>\n    </Layout>\n  )\n}\n\nconst projectsQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n\n    software: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          category: { eq: \"project_post\" }\n          tags: { eq: \"software\" }\n        }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            category\n            tags\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    mechanical: allMarkdownRemark(\n      filter: {\n        frontmatter: {\n          category: { eq: \"project_post\" }\n          tags: { eq: \"mechanical\" }\n        }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            category\n            tags\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={projectsQuery}\n    render={data => (\n      <ProjectsPage location={props.location} data={data} {...props} />\n    )}\n  />\n)\n"],"sourceRoot":""}